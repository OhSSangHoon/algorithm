import java.util.*;

public class Tries<Value> {
    private static int R = 256;
    private Node root;
    private int N;

    private class Node {
        private Object val;
        private Object[] next = new Object[R]; // Use Object[] instead of Node[]
    }

    public Value get(String key) {
        Node x = get(root, key, 0);
        if(x == null) {
            return null;
        }
        return (Value)x.val;
    }

    private Node get(Node x, String key, int d) {
        if(x == null) {
            return null;
        }
        if(d == key.length()) {
            return x;
        }
        char c = key.charAt(d);
        return get((Node)x.next[c], key, d+1); // Cast Object to Node
    }

    public void put(String key, Value val) {
        if(val == null) {
            delete(key);
        }else {
            root = put(root, key, val, 0);
        }
    }

    private Node put(Node x, String key, Value val, int d) {
        if(x == null) {
            x = new Node();
        }
        if(d == key.length()) {
            if(x.val == null) {
                N++;
            }
            x.val = val;
            return x;
        }
        char c = key.charAt(d);
        x.next[c] = put((Node)x.next[c], key, val, d+1); // Cast Object to Node
        return x;
    }

    public void delete(String key) {
        root = delete(root, key, 0);
    }

    private Node delete(Node x, String key, int d) {
        if(x == null) {
            return null;
        }
        if(d == key.length()) {
            if(x.val != null) N--;
            x.val = null;
        }
        else {
            char c = key.charAt(d);
            x.next[c] = delete((Node)x.next[c], key, d+1); // Cast Object to Node
        }

        if(x.val != null)
            return x;
        for(char c = 0; c < R; c++)
            if(x.next[c] != null)
                return x;
        return null;
    }

    public static void main(String[] args) {
        Tries<String> tries = new Tries<>();
        String[] a = {"hello", "world", "trie", "tree", "algorithm"};
        
        //문자열 배열 a를 tries 자료구조에 저장(값 삽입)
        for(String s: a) {
            tries.put(s, n);
        }
        
        Scanner sc = new Scanner(System.in);
        
        while(true) {
        	System.out.println("Search String: ");
        	String input = sc.nextLine();
        	
        	if("exit".equals(input)) {
        		System.out.println("프로그램 종료");
        		break;
        	}
        	
        	Integer result = tries.get(input);
        	if(result != null) {
        		System.out.println("검색한 문자: " + input);
        		System.out.println("찾은 값: " + result);
        	}else {
        		System.out.println(input + "는 존재하지 않습니다.");
        	}
        }
        sc.close();
    }
}
