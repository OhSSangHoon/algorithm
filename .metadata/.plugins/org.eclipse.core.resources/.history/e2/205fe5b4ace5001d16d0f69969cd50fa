import java.io.*;
import java.util.*;

public class HW1 {
    public static void main(String[] args) {
        int targetUser;
        int userNumber;
        int category;

        Scanner sc = new Scanner(System.in);
        String fileName = sc.nextLine();
        targetUser = sc.nextInt();
        userNumber = sc.nextInt();
        category = sc.nextInt();
        sc.close();

        FileProcessor fileProcessor = new FileProcessor();

        try {
            List<List<Integer>> usersContentScores = fileProcessor.readFileAndProcessContent(fileName, userNumber, category);
            int mostSimilarUser = findMostSimilarUser(targetUser, usersContentScores);
            System.out.println("타겟 사용자와 가장 유사한 사용자: " + mostSimilarUser);
            System.out.println("가장 유사한 사용자의 점수: " + usersContentScores.get(mostSimilarUser));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static class FileProcessor {
        private List<List<Integer>> readFileAndProcessContent(String fileName, int userNumber, int category) throws IOException {
            List<List<Integer>> usersContentScores = new ArrayList<>();

            try (BufferedReader reader = new BufferedReader(new FileReader(fileName))) {
                System.out.println("파일 내용: " + fileName);

                for (int i = 0; i < userNumber; i++) {
                    String[] scores = reader.readLine().split(" ");
                    List<Integer> contentScores = new ArrayList<>();
                    for (String score : scores) {
                        contentScores.add(Integer.parseInt(score));
                    }
                    usersContentScores.add(contentScores);
                }
                System.out.println();
            }
            return usersContentScores;
        }
    }

    public static int findMostSimilarUser(int targetUser, List<List<Integer>> usersContentScores) {
        double maxSimilarity = -1;
        int mostSimilarUser = -1;

        List<Integer> targetUserScores = usersContentScores.get(targetUser);

        for (int i = 0; i < usersContentScores.size(); i++) {
            if (i == targetUser) {
                continue; // 타겟 사용자와 자신을 비교하는 것은 제외
            }

            List<Integer> otherUserScores = usersContentScores.get(i);
            double similarity = cosineSimilarity(targetUserScores, otherUserScores);

            if (similarity > maxSimilarity) {
                maxSimilarity = similarity;
                mostSimilarUser = i;
            }
        }

        return mostSimilarUser;
    }

    public static double cosineSimilarity(List<Integer> vectorA, List<Integer> vectorB) {
        double dotProduct = 0;
        double normA = 0;
        double normB = 0;

        for (int i = 0; i < vectorA.size(); i++) {
            dotProduct += vectorA.get(i) * vectorB.get(i);
            normA += Math.pow(vectorA.get(i), 2);
            normB += Math.pow(vectorB.get(i), 2);
        }

        return dotProduct / (Math.sqrt(normA) * Math.sqrt(normB));
    }
}
